
initialize() {
	if (!exists("GenomeSize"))
	{defineConstant("GenomeSize", 1000); } // genome size
	
	if (!exists("L"))
	{defineConstant("L", 100); }// no. selected seasonal loci
	
	if (!exists("y"))
	{defineConstant("y", 1); }// exponent of fitness function
	
	if (!exists("N"))
	{defineConstant("N", 400); }// population size
	
	if (!exists("d"))
	{defineConstant("d", 0.6); } // dominance
	
	if (!exists("g"))
	{defineConstant("g", 5); } // generations per season     
	
	if (!exists("mut"))
	{defineConstant("mut", 1e-6);} // mutation rate
	
	if (!exists("rr"))
	{defineConstant("rr", 0.5);} // recombination rate
	
	
	initializeMutationRate(mut);
	initializeRecombinationRate(rr);
	initializeMutationType("m1", 0.5, "f", 0.0); // neutral
	initializeMutationType("m2", 0.5, "f", 0.0); // summer
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, GenomeSize-1);
	m2.color = "pink";
	
}


1 { sim.addSubpop("p1", N);
	catn("N=" + N + ", GenomeSize=" + GenomeSize + ", L=" + L +", d=" + d + ", y=" +y + ", mut_rate=" + mut + ", rec_rate=" + rr);
}


1 late() {
	val = asInteger(round(runif(L*2, min = 0, max = GenomeSize)));
	positions = sample(unique(val), L);
	// if (size(unique(val))!= 100){
	// val = asInteger(round(runif(L, min = 0, max = GenomeSize)));;
	// }
	
	
	for (pos in positions){
		target = sample(p1.genomes, N);
		target.addNewDrawnMutation(m2, pos);
	}

}

s1 fitness(NULL) { //summer
	gnm1 = genome1.mutationsOfType(m2);
	gnm2 = genome2.mutationsOfType(m2);
	ns = sum(match(gnm1, gnm2)>=0); //homozygosity
	nhet = size(gnm1) + size(gnm2) - 2 * ns;  // heterozygosity
	zs = ns + (d * nhet);
	
	return (1 + zs)^y;
}

s2 fitness(NULL) { //winter
	gnm1 = genome1.mutationsOfType(m2);
	gnm2 = genome2.mutationsOfType(m2);
	ns = sum(match(gnm1, gnm2)>=0); //homozygosity
	nhet = size(gnm1) + size(gnm2) - 2 * ns;  // heterozygosity
	nw = L-(ns+nhet);
	zw = nw + (d * nhet);
	
	return (1 + zw)^y;
}

100 {
	if (!exists("slimgui")) {
		p1.genomes.outputMS(filePath = NULL);}

}

1:5000 late(){ // have change 10000 to 5k
	if (sim.countOfMutationsOfType(m2) == 0) {
		sim.simulationFinished();
	}
	modValue = integerMod(sim.generation, (g*2));
	
	if (modValue >= 0 & modValue < g) { //summer
		if (exists("slimgui")) {cat("Summer\n");}
		s1;
	}
	if (modValue >= g) { //winter
		if (exists("slimgui")) {cat("Winter\n");}
		s2
			;	}

}

