
initialize() {
	if (!exists("GenomeSize"))
	{defineConstant("GenomeSize", 1e6); } // genome size
	
	if (!exists("L"))
	{defineConstant("L", 20); }// no. selected seasonal loci
	
	if (!exists("y"))
	{defineConstant("y", 2); }// exponent of fitness function
	
	if (!exists("N"))
	{defineConstant("N", 1e4); }// population size
	
	if (!exists("d"))
	{defineConstant("d", 0.6); } // dominance
	
	if (!exists("g_s"))
	{defineConstant("g_s", 5); } // generations per summer
	
	if (!exists("g_w"))
	{defineConstant("g_w", 5); } // generations per winter 
	
	if (!exists("g"))
	{defineConstant("g", (g_s + g_w)); } // generations per seasonal cycle     
	
	if (!exists("mut"))
	{defineConstant("mut", 1e-6);} // mutation rate
	
	if (!exists("rr"))
	{defineConstant("rr", 1e-8);} // recombination rate
	
	if (!exists("rGen"))
	{defineConstant("rGen", 100);} // remember individuals gen call
	
	if (!exists("group"))
	{defineConstant("group", 1);} // group of parameters
	
	if (!exists("sim_run"))
	{defineConstant("sim_run", 0);} // sim run
	
	if (!exists("n_burnin"))
	{defineConstant("n_burnin", 0);} // burnin
	if (!exists("fit"))
	{defineConstant("fit", 1);} // turn off fitness
	
	initializeMutationRate(mut);
	initializeRecombinationRate(rr);
	initializeMutationType("m1", 0.0, "f", 0.0); // neutral
	initializeMutationType("m2", 0.0, "f", 0.0); // summer
	initializeGenomicElementType("g1", m1, 1);
	initializeGenomicElement(g1, 0, GenomeSize-1);
	m1.color = "yellow";
	m2.color = "pink";
	m2.convertToSubstitution = F;
}



1 late() {
	line1 = paste(c("SimID:" + sim_run +", N=" + N + ", GenomeSize=" + GenomeSize + ", L=" + L +", d=" + d + ", y=" +y + ", mut_rate=" + mut + ", rec_rate=" + rr));
	writeFile(paste("~/oliviaphd/seglift_no_treeseq/slim_out/sim_data_" + sim_run + ".txt"), line1, append = F);
	
	sim.readFromPopulationFile(paste("/Users/olivia/oliviaphd/seglift_no_treeseq/burnin/" + n_burnin + ".txt"));
	
	val = asInteger(round(runif(L*2, min = 0, max = GenomeSize)));
	positions = sample(unique(val), L);
	
	
	line2 = paste("Summer positions:");
	line3 = "\n\n FREQUENCIES \nGen,mut_pos,mut_freq";
	writeFile(paste("~/oliviaphd/seglift_no_treeseq/slim_out/al_freq"+ asString(group) + "_"+ asString(sim_run)+".txt"), c(line2, positions, line3), append = T);
	
	for (pos in positions){
		target = sample(p0.genomes, N);
		target.addNewDrawnMutation(m2, pos);
	
	}
	
	//	for (i in 1:size(sim.mutations)-1){
	//		tab_line = paste(c(sim.generation,sim.mutations[i].position,sim.mutationFrequencies(p0)[i]), sep = ",");
	//		writeFile(paste("~/oliviaphd/seglift_no_treeseq/slim_out/al_freq"+ asString(group) + "_"+ asString(sim_run)+".txt"), tab_line, append = T);


}

s1 fitness(NULL) { //summer
	if (fit == 0){
		return 1.0;
	} else{
		
		gen = sim.generation;
		modValue10 = integerMod(gen, (g));
		gnm1 = genome1.mutationsOfType(m2);
		gnm2 = genome2.mutationsOfType(m2);
		ns = sum(match(gnm1, gnm2)>=0); //homozygosity summer
		nhet = size(gnm1) + size(gnm2) - 2 * ns;  // heterozygosity
		nw = L-(ns+nhet);//homozygosity winter
		if (modValue10 >= 0 & modValue10 < g_s) { //summer
			zs = ns + (d * nhet);
			return (1 + zs)^y; }
		else { // winter
			zw = nw + (d * nhet);
			
			return (1 + zw)^y;}
	}
}


2:10000 early(){
	if (exists("slimgui")) {cat(mean(p0.cachedFitness(NULL)) + "\n");}}

100001:109999 late(){ // have change 10000 to 5k
	if (sim.countOfMutationsOfType(m2) == 0) {
		sim.simulationFinished();
	}
	gen = sim.generation;
	modValue10 = integerMod(gen, (g));
	modValuerGen = integerMod(gen, rGen);
	
	if (modValue10 >= 0 & modValue10 < g_s) { //summer
		if (exists("slimgui")) {cat("Summer\n");}
	
	}
	if (modValue10 >= g_s) { //winter
		if (exists("slimgui")) {cat("Winter\n");}
	
	}
	if (modValuerGen == (g_s)) {// sample
		p0.outputMSSample(100, replace = F, filePath = paste("~/oliviaphd/seglift_no_treeseq/slim_out/ms_out_"+ asString(group) + "_"+ asString(sim_run)+"_"+ asString(gen)+".txt"), append = F);
	}

}

110000 late() {
	e_mc = sim.countOfMutationsOfType(m2);
	fix = sum(sim.mutationFrequencies(p0)== 1);
	loss = 100 - e_mc;
	
	p0.outputMSSample(N, filePath = paste("~/oliviaphd/seglift_no_treeseq/slim_out/ms_out_"+ asString(group) + "_"+ asString(sim_run)+"_"+ asString(gen)+".txt"), append = F);
	line4 = paste("winter_fixed:" + loss + "\n summer_fixed:" + fix);
	cat(line4);
}

