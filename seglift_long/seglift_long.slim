
initialize() {
	if (!exists("GenomeSize"))
	{defineConstant("GenomeSize", 105e5); } // genome size
	
	if (!exists("nChrom"))
	{defineConstant("nChrom", 21); } // number of chromosomes
	
	if (!exists("L"))
	{defineConstant("L", 10); }// no. selected seasonal loci
	
	if (!exists("y"))
	{defineConstant("y", 1); }// exponent of fitness function
	
	if (!exists("N"))
	{defineConstant("N", 1e4); }// population size
	
	if (!exists("d"))
	{defineConstant("d", 0.6); } // dominance
	
	if (!exists("g_s"))
	{defineConstant("g_s", 15); } // generations per summer
	
	if (!exists("g_w"))
	{defineConstant("g_w", 15); } // generations per winter 
	
	defineConstant("halfS", round(g_s/2)); // generation halfway through summer
	defineConstant("halfW", round(g_w/2)); // generation halfway through winter
	
	if (!exists("g"))
	{defineConstant("g", (g_s + g_w)); } // generations per seasonal cycle     
	
	if (!exists("mut"))
	{defineConstant("mut", 0.0);} // mutation rate
	
	if (!exists("rr"))
	{defineConstant("rr", 1e-8);} // recombination rate
	
	if (!exists("rGen"))
	{defineConstant("rGen", 150);} // remember individuals gen call
	
	if (!exists("group"))
	{defineConstant("group", 9);} // group of parameters
	
	if (!exists("sim_run"))
	{defineConstant("sim_run", 1);} // sim run
	
	if (!exists("fit"))
	{defineConstant("fit",1);} //if fit = 0 fitness function switched off
	
	initializeMutationRate(mut);
	
	lines = readFile(paste(c("~/oliviaphd/seglift_long/group_"+group+"/rec_map.txt")));
	rates = NULL;
	ends = NULL;
	
	for (line in lines){
		components = strsplit(line, "\t");
		ends = c(ends, asInteger(components[0]));
		rates = c(rates, asFloat(components[1]));
	}
	initializeRecombinationRate(rates,ends);
	
	initializeMutationType("m1", 0.0, "f", 0.0); // neutral
	initializeMutationType("m2", 0.0, "f", 0.0); // summer
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, GenomeSize-1);
	m2.color = "pink";
	m2.convertToSubstitution = F;
	
	initializeTreeSeq();
}


1 late() {
	cat(sim_run + "\n");
	line1 = paste(c("SimID:" + sim_run +"\n" + "Fitness_on=" + fit+ ", N=" + N + ", GenomeSize=" + GenomeSize + ", L=" + L +", d=" + d + ", y=" +y + ", mut_rate=" + mut + ", rec_rate=" + rr + ", g=" + g));
	writeFile(paste("~/oliviaphd/seglift_long/group_"+ asString(group)+"/sim_data_"+ asString(group) + "_" + asString(sim_run)+".txt"), line1, append = F);
	
	
	sim.readFromPopulationFile(paste("~/oliviaphd/seglift_long/group_"+ asString(group)+"/burnin_seglift_long_"+ asString(group) + "_"+ asString(sim_run) + ".trees"));
	
	//sim.readFromPopulationFile("~/oliviaphd/seglift_long/group_0/burnin_seglift_long_0_0.trees");
	
	if (L > 0){
		win = GenomeSize/nChrom;
		win_mid = win/2;
		
		line2 = paste("Summer positions:");
		writeFile(paste("~/oliviaphd/seglift_long/group_"+ asString(group)+"/sim_data_"+ asString(group) + "_"+ asString(sim_run)+".txt"), line2, append = T);
		
		
		for (i in 1:L){
			//pos = (i*(2*win))-win_mid; // i selected site every second chromsome
			pos = (i*win)-win_mid; // 1 selected site per chromosome
			writeFile(paste("~/oliviaphd/seglift_long/group_"+ asString(group)+"/sim_data_"+ asString(group) + "_"+ asString(sim_run)+".txt"), asString(pos), append = T);
			target = sample(p0.genomes, asInteger(N));
			target.addNewDrawnMutation(m2, asInteger(pos));
		}
		
		if (sim.mutationFrequencies(p0)[1] != 0.5){
			sim.simulationFinished();
			catn("ERROR: SELECTED MUTATIONS NOT AT 0.5 STARTING FREQUENCY");
		}
		
		
		line3 = "FREQUENCIES \nGen,mut_pos,mut_freq";
		writeFile(paste("~/oliviaphd/seglift_long/group_"+ asString(group)+"/al_freq_"+ asString(group) + "_"+ asString(sim_run)+".txt"), line3, append = F);
		for (i in 1:size(sim.mutations)-1){
			tab_line = paste(c(sim.generation,sim.mutations[i].position,sim.mutationFrequencies(p0)[i]), sep = ",");
			writeFile(paste("~/oliviaphd/seglift_long/group_"+ asString(group)+"/al_freq_"+ asString(group) + "_"+ asString(sim_run)+".txt"), tab_line, append = T);
		}
	}
}

s1 fitness(NULL) { //summer
	if (fit == 0){
		return 1.0;
	} else{
		
		gen = sim.generation;
		modValueSeason = integerMod(gen, (g));
		gnm1 = genome1.mutationsOfType(m2);
		gnm2 = genome2.mutationsOfType(m2);
		ns = sum(match(gnm1, gnm2)>=0); //homozygosity summer
		nhet = size(gnm1) + size(gnm2) - 2 * ns;  // heterozygosity
		nw = L-(ns+nhet);//homozygosity winter
		if (modValueSeason >= 0 & modValueSeason < g_s) { //summer
			zs = ns + (d * nhet);
			return (1 + zs)^y; }
		else { // winter
			zw = nw + (d * nhet);
			
			return (1 + zw)^y;}
	}
}

2:120000 early(){
	if (exists("slimgui")) {cat(mean(p0.cachedFitness(NULL)) + "\n");}}
1:120000 late(){
	
	gen = sim.generation;
	modValueSeason = integerMod(gen, (g));
	modValuerGen = integerMod(gen, rGen);
	
	if (modValueSeason >= 0 & modValueSeason < g_s) { //summer
		if (exists("slimgui")) {cat("Summer\n");}
	}
	if (modValueSeason >= g_s) { //winter
		if (exists("slimgui")) {cat("Winter\n");}
	}
	if (modValuerGen == 0 | modValuerGen == halfS | modValuerGen == (g_s) | modValuerGen == (g_s + halfW)) {// sample
		if (exists("slimgui")) {catn("Gen:" + gen + " sampling");}
		if (L > 0){
			for (i in 1:size(sim.mutations)-1){
				tab_line = paste(c(gen,sim.mutations[i].position,sim.mutationFrequencies(p0)[i]), sep = ",");
				writeFile(paste("~/oliviaphd/seglift_long/group_"+ asString(group)+"/al_freq_"+ asString(group) + "_"+ asString(sim_run)+".txt"), tab_line, append = T);
			 
			}
		}
		rInd= sample(p0.individuals, 100);
		sim.treeSeqRememberIndividuals(rInd);
	}

}

120000 late() {
	gen = sim.generation;
	if (L > 0){
		for (i in 1:size(sim.mutations)-1){
			tab_line = paste(c(gen,sim.mutations[i].position,sim.mutationFrequencies(p0)[i]), sep = ",");
			writeFile(paste("~/oliviaphd/seglift_long/group_"+ asString(group)+"/al_freq_"+ asString(group) + "_"+ asString(sim_run)+".txt"), tab_line, append = T);
		}
	}
	e_mc = sim.countOfMutationsOfType(m2);
	fix = sum(sim.mutationFrequencies(p0)== 1);
	loss = L - e_mc;
	
	line4 = paste("\nwinter_fixed:" + loss + "\nsummer_fixed:" + fix);
	catn(line4);
	sim.treeSeqOutput(paste("~/oliviaphd/seglift_long/group_"+ asString(group)+"/treeseq_seglift_long_"+ asString(group) + "_" + asString(sim_run) + ".trees"));
}

