
initialize() {
	if (!exists("GenomeSize"))
	{defineConstant("GenomeSize", 1e6); } // genome size
	
	if (!exists("L"))
	{defineConstant("L", 20); }// no. selected seasonal loci
	
	if (!exists("y"))
	{defineConstant("y", 2); }// exponent of fitness function
	
	if (!exists("N"))
	{defineConstant("N", 1e4); }// population size
	
	if (!exists("d"))
	{defineConstant("d", 0.6); } // dominance
	
	if (!exists("g_s"))
	{defineConstant("g_s", 5); } // generations per summer
	
	if (!exists("g_w"))
	{defineConstant("g_w", 5); } // generations per winter 
	    
	if (!exists("g"))
	{defineConstant("g", (g_s + g_w)); } // generations per seasonal cycle     
	
	if (!exists("mut"))
	{defineConstant("mut", 0.0);} // mutation rate
	
	if (!exists("rr"))
	{defineConstant("rr", 1e-8);} // recombination rate
	
	if (!exists("rGen"))
	{defineConstant("rGen", 100);} // remember individuals gen call
	
	if (!exists("sim_run"))
	{defineConstant("sim_run", 0);} // sim run
	
	initializeMutationRate(mut);
	initializeRecombinationRate(rr);
	initializeMutationType("m1", 0.0, "f", 0.0); // neutral
	initializeMutationType("m2", 0.5, "f", 0.0); // summer
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, GenomeSize-1);
	m2.color = "pink";
	m2.convertToSubstitution = F;
	
	initializeTreeSeq();
}


// the information for the initial pop is included in the treesqe file, and i think this step is not in the SLiM manual recipe.
// this is not needed, and anyway its effect is over written once the burnin.tress file is read in.
// NOTE: p0 is the first pop in treeseq ferom msprime.
//1 {
//	sim.addSubpop("p1", N);
//	catn("N=" + N + ", GenomeSize=" + GenomeSize + ", L=" + L +", d=" + d + ", y=" +y + ", mut_rate=" + mut + ", rec_rate=" + rr);

//}


1 late() {
	cat(sim_run);
	line1 = paste(c("SimID:" + sim_run +"\n" +"N=" + N + ", GenomeSize=" + GenomeSize + ", L=" + L +", d=" + d + ", y=" +y + ", mut_rate=" + mut + ", rec_rate=" + rr + ", g=" + g));
	writeFile(paste("~/oliviaphd/data/seglift_ts/sim_data_"+ asString(sim_run)+".txt"), line1, append = F);
	
	
	sim.readFromPopulationFile(paste("~/oliviaphd/data/seglift_ts/burnin_seglift_ts_"+ asString(sim_run) + ".trees"));
	val = asInteger(round(runif(L*2, min = 0, max = GenomeSize)));
	positions = sample(unique(val), L);
	
	
	line2 = paste("Summer positions:");
	line3 = "\n\n FREQUENCIES \nGen,mut_pos,mut_freq";
	writeFile(paste("~/oliviaphd/data/seglift_ts/sim_data_"+ asString(sim_run)+".txt"), c(line2, positions, line3), append = T);
	
	for (pos in positions){
		target = sample(p0.genomes, asInteger(N/2));
		target.addNewDrawnMutation(m2, pos);
		
	}
	
	for (i in 1:size(sim.mutations)-1){
		tab_line = paste(c(sim.generation,sim.mutations[i].position,sim.mutationFrequencies(p0)[i]), sep = ",");
		writeFile(paste("~/oliviaphd/data/seglift_ts/sim_data_"+ asString(sim_run)+".txt"), tab_line, append = T);
	}

}

s1 fitness(NULL) { //summer
	gnm1 = genome1.mutationsOfType(m2);
	gnm2 = genome2.mutationsOfType(m2);
	ns = sum(match(gnm1, gnm2)>=0); //homozygosity
	nhet = size(gnm1) + size(gnm2) - 2 * ns;  // heterozygosity
	zs = ns + (d * nhet);
	
	return (1 + zs)^y;
}

s2 fitness(NULL) { //winter
	gnm1 = genome1.mutationsOfType(m2);
	gnm2 = genome2.mutationsOfType(m2);
	ns = sum(match(gnm1, gnm2)>=0); //homozygosity
	nhet = size(gnm1) + size(gnm2) - 2 * ns;  // heterozygosity
	nw = L-(ns+nhet);
	zw = nw + (d * nhet);
	
	return (1 + zw)^y;
}


1:5000 late(){ // have change 10000 to 5k
	if (sim.countOfMutationsOfType(m2) == 0) {
		sim.simulationFinished();
	}
	gen = sim.generation;
	modValue10 = integerMod(gen, (g));
	modValuerGen = integerMod(gen, rGen);
	
	if (modValue10 >= 0 & modValue10 < g_s) { //summer
		if (exists("slimgui")) {cat("Summer\n");}
		s1;	
	}
	if (modValue10 >= g_s) { //winter
		if (exists("slimgui")) {cat("Winter\n");}
		s2;
	}
	if (modValuerGen == 0) {// sample | modValuerGen == (g_s)
	for (i in 1:size(sim.mutations)-1){
			tab_line = paste(c(gen,sim.mutations[i].position,sim.mutationFrequencies(p0)[i]), sep = ",");
			//writeFile(paste("~/oliviaphd/data/seglift_ts/sim_data_"+ asString(sim_run)+".txt"), tab_line, append = T);
		}
		
		rInd= sample(p0.individuals, 100);
		sim.treeSeqRememberIndividuals(rInd);
	}

}

5000 late() {
	
	e_mc = sim.countOfMutationsOfType(m2);
	fix = sum(sim.mutationFrequencies(p0)== 1);
	loss = L - e_mc;
	
	line4 = paste("\nwinter_fixed:" + loss + "\nsummer_fixed:" + fix);
	catn(line4);
	//writeFile(paste("~/oliviaphd/data/seglift_ts/sim_data_"+ asString(sim_run)+".txt"), line4, append = T);
	sim.treeSeqOutput(paste("~/oliviaphd/data/seglift_ts/treeseq_seglift_ts_" + asString(sim_run) + ".trees"));
}

