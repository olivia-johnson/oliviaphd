initialize() {
	initializeMutationRate(1e-7);
	initializeMutationType("m1", 0.5, "f", 0.0); // neutral
	initializeMutationType("m2", 0.5, "g", -0.01, 0.1); // deleterious
	initializeMutationType("m3", 0.5, "f", 0.9); // beneficial
	
	initializeMutationType("m4", 0.5, "f", 0.9); // summer
	initializeMutationType("m5", 0.5, "f", 0.9); // winter
	
	m2.color="red";
	m3.color = "green";
	
	m4.color="orange";
	m5.color = "blue";
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElementType("g2", m1, 1.0);
	initializeGenomicElementType("g3", m1, 1.0);
	initializeGenomicElementType("g4", m2, 1.0);
	
	// lines = readFile("~/Downloads/GStest.txt");
	lines = readFile("~/work/PhD/oliviaphd/GStest.txt");
	for (line in lines) {
		components = strsplit(line, "\t");
		start = asInteger(components[0]);
		end = asInteger(components[1]);
		type = components[2];
		if (type == 'intergenic') {
			initializeGenomicElement(g1, start, end);
		}
		if (type == 'exon') {
			initializeGenomicElement(g2, start, end);
		}
		if (type == 'intron') {
			initializeGenomicElement(g3, start, end);
		}
		if (type == 'conserved_nc') {
			initializeGenomicElement(g4, start, end);
		}
	}
	
	// rec = readFile("~/Downloads/RRtest.txt");
	rec = readFile("~/work/PhD/oliviaphd/RRtest.txt");
	rates = NULL;
	ends = NULL;
	
	for (x in rec)
	{
		rr = strsplit(x, "\t");
		ends = c(ends, asInteger(rr[0]));
		rates = c(rates, asFloat(rr[1]));
	}
	
	ends = c(ends[1:(size(ends)-1)] - 2, 20000);
	rates = rates * 1e-8;
	initializeRecombinationRate(rates, ends);

}

1 { sim.addSubpop("p1", 1500); }


1000 late(){
	s_ind = sample(p1.genomes, 100);
	s_ind.addNewDrawnMutation(m4, 8000);
	w_ind= sample(p1.genomes, 100);
	w_ind.addNewDrawnMutation(m5, 15000);
}

1001:10000 late(){
	modValue = integerMod(sim.generation, 10);
	mut_s = sim.mutationsOfType(m4);
	mut_w = sim.mutationsOfType(m5);
	s_freq = sim.mutationFrequencies(NULL, mut_s);
	w_freq = sim.mutationFrequencies(NULL, mut_w);
	mutsum = sim.countOfMutationsOfType(m4);
	mutwin = sim.countOfMutationsOfType(m5);
	if (modValue == 0) //summer
	{
	
		sim.mutationsOfType(m4).setSelectionCoeff(0.5-(mut_s.selectionCoeff*s_freq));
		sim.mutationsOfType(m5).setSelectionCoeff(-(mut_w.selectionCoeff*w_freq));
	}
	if (modValue == 5)  //winter
	{
		sim.mutationsOfType(m4).setSelectionCoeff(-(mut_s.selectionCoeff*s_freq));
		sim.mutationsOfType(m5).setSelectionCoeff(0.5-(mut_w.selectionCoeff*w_freq));
	}
	if (mutsum == 0 | mutwin == 0)
	{
		fixed_s = (sum(sim.substitutions.mutationType == m4) == 1);
		fixed_w = (sum(sim.substitutions.mutationType == m5) == 1);
		cat(ifelse(fixed_s, "SUMMER FIXED\n", "SUMMER LOST\n"));
		cat(ifelse(fixed_w, "WINTER FIXED\n", "WINTER LOST\n"));
		sim.simulationFinished();
	}
}




//10000 { sim.simulationFinished(); }