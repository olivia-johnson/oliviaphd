
initialize() {
	if (!exists("tmpdir"))
	{defineConstant("tmpdir", "~/phd_data/seglift_allele/group_");} // call in tmpdir
	
	if (!exists("GenomeSize"))
	{defineConstant("GenomeSize", 10); } // genome size
	
	if (!exists("L"))
	{defineConstant("L", 10); }// no. selected seasonal loci
	
	if (!exists("y"))
	{defineConstant("y", 4); }// exponent of fitness function
	
	if (!exists("n_s"))
	{defineConstant("n_s", 1e4); }// summer population size
	
	if (!exists("n_w"))
	{defineConstant("n_w", 1e4); }// winter population size
	
	if (!exists("g_s"))
	{defineConstant("g_s", 15); } // generations per summer
	
	if (!exists("g_w"))
	{defineConstant("g_w", 15); } // generations per winter 
	
	defineConstant("halfS", round(g_s/2)); // generation halfway through summer
	defineConstant("halfW", round(g_w/2)); // generation halfway through winter
	
	if (!exists("g"))
	{defineConstant("g", (g_s + g_w)); } // generations per seasonal cycle     
	
	if (!exists("mut"))
	{defineConstant("mut", 0.0);} // mutation rate
	
	if (!exists("rr"))
	{defineConstant("rr", 0.5);} // recombination rate
	
	if (!exists("rGen"))
	{defineConstant("rGen", 750);} // remember individuals gen call
	
	if (!exists("group"))
	{defineConstant("group", 0);} // group of parameters
	
	if (!exists("sim_run"))
	{defineConstant("sim_run", 2);} // sim run
	
	if (!exists("fit"))
	{defineConstant("fit",2);} //if fit = 0 fitness function switched off
	initializeSLiMOptions(keepPedigrees=T)	;
	initializeMutationRate(mut);
	initializeRecombinationRate(rr);
	initializeMutationType("m1", 0.0, "f", 0.0); // neutral
	initializeMutationType("m2", 0.0, "f", 0.0); // summer
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, GenomeSize-1);
	m2.color = "pink";
	m2.convertToSubstitution = F;
	
	//initializeTreeSeq();
}


1 early() {
	sim.addSubpop("p0", n_s);}

1 late(){
	
	
	if (L > 0){
		win = GenomeSize/L;
		win_mid = win/2;
		
		
				data = c(1, 0.9, 0.9, 1);
		mu=c(0,0);
		sigma=matrix(data, ncol=2);
		s_dom= runif(L, 0, 1);
		w_dom=runif(L, 0, 1);
		effects=rmvnorm(L, mu, sigma);
		
		for (i in 1:L-1){
			if (s_dom[i] + w_dom[i] <=1){
				do{
					s= runif(1, 0, 1);
					w=runif(1, 0, 1);}
				while (s + w <=1);
				if (s+w >1){
					s_dom[i] =s;
					w_dom[i] = w;
				}}}
		
		defineGlobal("s_d", s_dom);
		defineGlobal("w_d", w_dom);
		defineGlobal("s_fx", exp(effects[,0]));
		defineGlobal("w_fx", exp(effects[,1]));
		
		for (i in 1:L){
			pos=i-1;
			
			target = sample(p0.genomes, asInteger(n_s));
			target.addNewDrawnMutation(m2, asInteger(pos));
		}
		
		defineGlobal("mutations", sim.mutations);
		if (identical(mutations.position, 1:L-1)==F){
			sim.simulationFinished();
			catn("ERROR: INCORRECT MUTATION ORDER");
		}
		
		
		if (sim.mutationFrequencies(p0)[1] != 0.5){
			sim.simulationFinished();
			catn("ERROR: SELECTED MUTATIONS NOT AT 0.5 STARTING FREQUENCY");
		}
		
		line3 = "FREQUENCIES \nGen,mut_pos,mut_freq, s_d, w_d, s_fx, w_fx";
		writeFile(paste(asString(tmpdir)+"/al_freq_group_"+ asString(group) + "_"+ asString(sim_run)+".txt"), line3, append = F);
		writeFile(paste(asString(tmpdir)+"/reproductiveOutput_group_"+ asString(group) + "_"+ asString(sim_run)+".txt"), paste("Gen","CountofReproductiveOutput", sep=","), append = F);
		writeFile(paste(asString(tmpdir)+"/fitness_group_"+ asString(group) + "_"+ asString(sim_run)+".txt"), paste("Gen","Fitness", sep=","), append = F);
		for (i in 1:size(sim.mutations)-1){
			tab_line = paste(c(sim.generation,sim.mutations[i].position,sim.mutationFrequencies(p0)[i],s_d[i], w_d[i],s_fx[i], w_fx[i]), sep = ",");
			writeFile(paste(asString(tmpdir)+"/al_freq_group_"+ asString(group) + "_"+ asString(sim_run)+".txt"), tab_line, append = T);
		}
	}
}

s1 fitness(NULL) { //summer
	if (fit == 0){
		return 1.0;
	} else{
		genomes=individual.genomes.mutationCountsInGenomes(mutations=mutations);
		ns = asInteger(genomes==2); //homozygosity summer
		het = asInteger(genomes==1);  // heterozygosity
		nw = asInteger(genomes==0);  //homozygosity winter
		if (modValueSeason >= 0 & modValueSeason < g_s) { //summer
			dom = het*s_d;
			zs=sum((dom+ns)*s_fx);
			return (1 + zs)^y; }
		
		else { // winter
			dom = het*w_d;
			zw=sum((dom+nw)*w_fx);
			return (1 + zw)^y;}
	}
}

1:120000 early(){
	defineGlobal("gen", sim.generation);
	defineGlobal("modValueSeason",integerMod(gen, g));
	defineGlobal("modValuerGen", integerMod(gen, rGen));
	defineGlobal("fixed", sum(sim.mutationFrequencies(p0)==1));
}

2:120000 early(){
	
	if (modValueSeason >= 0 & modValueSeason < g_s) { //summer
		if (modValueSeason == 0){
			p0.setSubpopulationSize(n_s);}
		if (exists("slimgui")) {cat("Summer\n");}
	}
	if (modValueSeason >= g_s) { //winter
		if (modValueSeason == g_s){
			p0.setSubpopulationSize(n_w);}
		if (exists("slimgui")) {cat("Winter\n");}
	}
	
	//if (modValuerGen == (halfS) | modValuerGen == (g_s) | modValuerGen == (g_s+halfW) | modValuerGen == (g_s + g_w)) {// sample
	
	
	if (modValuerGen >=0 & modValuerGen <=(g_s + g_w-1)){
		for (i in 1:size(sim.mutations)-1){
			tab_line = paste(c(gen,sim.mutations[i].position,sim.mutationFrequencies(p0)[i]), sep = ",");
			writeFile(paste(asString(tmpdir)+"/al_freq_group_"+ asString(group) + "_"+ asString(sim_run)+".txt"), tab_line, append = T);
		}
		fitnesses = p0.cachedFitness(NULL);
		offspring=p0.lifetimeReproductiveOutput;
		writeFile(paste(asString(tmpdir)+"/reproductiveOutput_group_"+ asString(group) + "_"+ asString(sim_run)+".txt"), paste(gen+","+ offspring, sep="\n"), append = T);
		
		writeFile(paste(asString(tmpdir)+"/fitness_group_"+ asString(group) + "_"+ asString(sim_run)+".txt"), paste(gen+","+ fitnesses, sep="\n"), append = T);
	}
	if ((sim.countOfMutationsOfType(m2)- sum(sim.mutationFrequencies(p0)==1)) == 0){
		gen = sim.generation;
		if (L > 0){
			for (i in 1:size(sim.mutations)-1){
				tab_line = paste(c(gen,sim.mutations[i].position,sim.mutationFrequencies(p0)[i]), sep = ",");
				writeFile(paste(asString(tmpdir)+"/al_freq_group_"+ asString(group) + "_"+ asString(sim_run)+".txt"), tab_line, append = T);
			}
		}
		e_mc = sim.countOfMutationsOfType(m2);
		loss = L - e_mc;
		
		line4 = paste("\nwinter_fixed:" + loss + "\nsummer_fixed:" + fixed);
		catn(line4);
		sim.simulationFinished();
	}
}

2:120000 early(){
	if (exists("slimgui")) {cat(mean(p0.cachedFitness(NULL)) + "\n");}
}

120000 late() {
	gen = sim.generation;
	if (L > 0){
		for (i in 1:size(sim.mutations)-1){
			tab_line = paste(c(gen,sim.mutations[i].position,sim.mutationFrequencies(p0)[i]), sep = ",");
			writeFile(paste(asString(tmpdir)+"/al_freq_group_"+ asString(group) + "_"+ asString(sim_run)+".txt"), tab_line, append = T);
		}
	}
	e_mc = sim.countOfMutationsOfType(m2);
	loss = L - e_mc;
	mem = usage(peak=T);
	line4 = paste("\nwinter_fixed:" + loss + "\nsummer_fixed:" + fixed +"\nMemory usage: "+ mem);
	catn(line4);
}

