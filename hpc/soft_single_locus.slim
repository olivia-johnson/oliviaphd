
initialize() {
	if (!exists("tmpdir"))
	{defineConstant("tmpdir", "/Users/olivia/phd_data/Results/single_locus/soft/group_1");} // call in tmpdir
	
	if (!exists("results_dir"))
	{defineConstant("results_dir", "/Users/olivia/phd_data/Results/single_locus/soft/group_1");} // call in results dir
	
	if (!exists("GenomeSize"))
	{defineConstant("GenomeSize", 5100000); } // genome size
	
	if (!exists("winSize"))
	{defineConstant("winSize", 10000); } // window size
	
	if (!exists("f"))
	{defineConstant("f", 1); } // mutation frequency (f/2N)
	
	if (!exists("s_s"))
	{defineConstant("s_s", 0.5); }// summer selection coefficient
	
	if (!exists("s_w"))
	{defineConstant("s_w", 0.5); }// winter selection coefficient
	
	if (!exists("n_s"))
	{defineConstant("n_s", 1e4); }// summer population size
	
	if (!exists("n_w"))
	{defineConstant("n_w", 1e4); }// winter population size
	if (!exists("g_s"))
	{defineConstant("g_s", 10); } // generations per summer
	
	if (!exists("g_w"))
	{defineConstant("g_w", 10); } // generations per winter 
	
	if (!exists("g"))
	{defineConstant("g", (g_s + g_w)); } // generations per seasonal cycle     
	
	if (!exists("mut"))
	{defineConstant("mut", 1e-6);} // mutation rate
	
	if (!exists("rr"))
	{defineConstant("rr", 1e-6);} // recombination rate
	
	if (!exists("rGen"))
	{defineConstant("rGen", 12000);} // remember individuals gen call
	
	if (!exists("group"))
	{defineConstant("group", 1);} // group of parameters
	
	if (!exists("sim_run"))
	{defineConstant("sim_run", 0);} // sim run
	
	if (!exists("fit"))
	{defineConstant("fit",1);} //if fit = 0 fitness function switched off
	initializeSLiMOptions(keepPedigrees=T)	;
	initializeMutationRate(c(0.0,1e-5,0.0), c(asInteger((GenomeSize-(10*winSize))/2)-1, asInteger((GenomeSize-(10*winSize))/2)+1,GenomeSize-1));
	
	//	initializeRecombinationRate(rr);
	
	map = readCSV(paste(asString(tmpdir)+"/rec_map_group_"+asString(group)+".txt"), sep="\t");
	ends = map.getValue("ends");
	rates = map.getValue("rates");
	initializeRecombinationRate(rates, ends);
	
	initializeMutationType("m1", 0.0, "f", 0.0);  // seasonal mutations
	initializeMutationType("m2", 0.0, "f", 0.0);  // neutral mutations
	initializeGenomicElementType("g1", m2, 1.0);
	initializeGenomicElementType("g2", m1, 1.0);
	initializeGenomicElement(g1, 0, asInteger((GenomeSize-(10*winSize))/2)-1);
	initializeGenomicElement(g2, asInteger((GenomeSize-(10*winSize))/2),asInteger((GenomeSize-(10*winSize))/2));
	initializeGenomicElement(g1, asInteger((GenomeSize-(10*winSize))/2)+2, GenomeSize-1);
	m1.color = "pink";
	m1.convertToSubstitution = F;
	
	m1.mutationStackPolicy = "f";
	
	initializeTreeSeq();
}

/// "/tmp/lls_" + asString(tmpdir)+"/al_freq_group_"  HPC TMPDIR PATH

1 early(){	defineGlobal("restarts", 0);
	defineGlobal("log_samp", g*2);}

1 late() {
	cat(sim_run + "\n");
	line1 = paste(c("SimID:" + sim_run +"\n" + "Fitness_on=" + fit+ ", n_s=" + n_s + ", n_w=" + n_w+ ", GenomeSize=" + GenomeSize +", s_s=" +s_s +", s_w=" +s_w + ", g_s=" + g_s + ", g_w="+g_w+", initial_freq="+f));
	
	writeFile(paste(asString(tmpdir)+"/slimlog_group_"+ asString(group) + "_"+ asString(sim_run)+".txt"), line1, append = F);
	
	if (fileExists(paste(asString(results_dir)+"/burnin_seglift_group_"+ asString(group) + "_"+ asString(sim_run) + ".trees"))==T){
		sim.readFromPopulationFile(paste(asString(results_dir)+ "/burnin_seglift_group_"+ asString(group) + "_"+ asString(sim_run) + ".trees"));} else{
		sim.readFromPopulationFile(paste(asString(tmpdir)+ "/burnin_seglift_group_"+ asString(group) + "_"+ asString(sim_run) + ".trees"));}
	
	
	//		sim.mutationsOfType(m1).setSelectionCoeff(s_s);
	line3 = "FREQUENCIES \nGen,mut_pos,mut_freq";
	writeFile(paste(asString(tmpdir)+ "/al_freq_group_"+ asString(group) + "_"+ asString(sim_run)+".txt"), line3, append = F);
	writeFile(paste(asString(tmpdir)+"/pedigree_group_"+ asString(group) + "_"+ asString(sim_run)+".txt"), paste("Gen","Ind","P1","P2", "G1", "G2", "G3", "G4" , sep=","), append = F);


}


fitnessEffect(p0) {
	if (length(individual.genomes.mutations)>0){
		if (length(individual.genomes.mutations)>1){
			return 1.0 + s_s;
		}else{
			return 1.0+(0.5*s_s);}
	} else {
		return 1.0;
	}
}

2:12000 early(){
	defineGlobal("gen", sim.cycle);
	defineGlobal("modValueSeason",integerMod(gen, g));
	defineGlobal("modValuelog", integerMod(gen, log_samp));
	
	if (modValuelog ==0){
		catn(gen);}


}

12000:100000 early(){
	defineGlobal("gen", sim.cycle);
	defineGlobal("modValueSeason",integerMod(gen, g));
	defineGlobal("modValuerGen", integerMod(gen, rGen));
	
	
	if (modValuerGen ==0){
		catn(gen);}
	defineGlobal("modValuelog", integerMod(gen, log_samp));

}

2:12000 late(){
	defineGlobal("fixed", sum(sim.mutationFrequencies(p0)==1));
	if (modValueSeason >= 0 & modValueSeason < g_s) { //summer
		if (modValueSeason == 0){
			p0.setSubpopulationSize(n_s);}
		if (exists("slimgui")) {cat("Summer\n");}
	}
	if (modValueSeason >= g_s) { //winter
		if (modValueSeason == g_s){
			p0.setSubpopulationSize(n_w);}
		if (exists("slimgui")) {cat("Winter\n");}
	}
	
	if (modValuelog >=0 & modValuelog <=((3*(g_s + g_w))-1)) {
		if (exists("slimgui")) {catn("Gen:" + gen + " sampling");}
		if (length(sim.mutations)>0){
			for (i in 1:size(sim.mutations)-1){
				tab_line = paste(c(gen,sim.mutations[i].id,sim.mutationFrequencies(p0)[i]), sep = ",");
				writeFile(paste(asString(tmpdir)+"/al_freq_group_"+ asString(group) + "_"+ asString(sim_run)+".txt"), tab_line, append = T);}}
		rInd= sample(p0.individuals, 100);
		sim.treeSeqRememberIndividuals(rInd);
	}
	if (modValuelog >= rGen-2 | modValuelog >= 0 & modValuelog <=(g_s + g_w)) {
		pedID=p0.individuals.pedigreeID;
		
		for (ind in 1:p0.individualCount-1){
			indv = p0.individuals[ind].pedigreeID;
			parents = p0.individuals[ind].pedigreeParentIDs;
			grandparents = p0.individuals[ind].pedigreeGrandparentIDs;
			writeFile(paste(asString(tmpdir)+"/pedigree_group_"+ asString(group) + "_"+ asString(sim_run)+".txt"), paste(gen, indv, parents, grandparents, sep=","), append = T);
		}
	}
}

2:100000 late(){
	if (sum(sim.mutationFrequencies(NULL))>=1.0){
		if (length(sim.mutations)>1){
			outcome = paste(group+ "_"+sim_run + ": FIXED at gen "+ gen+"\n");			writeFile(paste(asString(tmpdir)+"/slimlog_group_"+ asString(group) + "_"+ asString(sim_run)+".txt"), outcome, append = T);
			for (i in 1:size(sim.mutations)-1){
				tab_line = paste(c(gen,sim.mutations[i].id,sim.mutationFrequencies(p0)[i]), sep = ",");
				writeFile(paste(asString(tmpdir)+"/al_freq_group_"+ asString(group) + "_"+ asString(sim_run)+".txt"), tab_line, append = T);}
			community.deregisterScriptBlock(self);}
		
		else {
			outcome = paste(group+ "_"+sim_run + ": single mutation fixed at gen "+ gen+" â€“ RESTARTING\n");
			writeFile(paste(asString(tmpdir)+"/slimlog_group_"+ asString(group) + "_"+ asString(sim_run)+".txt"), outcome, append = T);
			
			// go back to generation 1
			if (fileExists(paste(asString(results_dir)+"/burnin_seglift_group_"+ asString(group) + "_"+ asString(sim_run) + ".trees"))==T){
				sim.readFromPopulationFile(paste(asString(results_dir)+ "/burnin_seglift_group_"+ asString(group) + "_"+ asString(sim_run) + ".trees"));} else{
				sim.readFromPopulationFile(paste(asString(tmpdir)+ "/burnin_seglift_group_"+ asString(group) + "_"+ asString(sim_run) + ".trees"));}
			
			// start a newly seeded run
			setSeed(rdunif(1, 0, asInteger(2^62) - 1));
			defineGlobal("log_samp", g*2);
			// re-introduce the sweep mutation
			target = sample(p0.genomes, asInteger(f));
			target.addNewDrawnMutation(m1, asInteger((GenomeSize-(10*winSize))/2));
			line3 = "FREQUENCIES \nGen,mut_pos,mut_freq";
			writeFile(paste(asString(tmpdir)+ "/al_freq_group_"+ asString(group) + "_"+ asString(sim_run)+".txt"), line3, append = F);
			writeFile(paste(asString(tmpdir)+"/pedigree_group_"+ asString(group) + "_"+ asString(sim_run)+".txt"), paste("Gen","Ind","P1","P2", "G1", "G2", "G3", "G4" , sep=","), append = F);}
	}
}


12000:100000 late(){
	defineGlobal("fixed", sum(sim.mutationFrequencies(p0)==1));
	if (modValueSeason >= 0 & modValueSeason < g_s) { //summer
		if (modValueSeason == 0){
			p0.setSubpopulationSize(n_s);}
		if (exists("slimgui")) {cat("Summer\n");}
	}
	if (modValueSeason >= g_s) { //winter
		if (modValueSeason == g_s){
			p0.setSubpopulationSize(n_w);}
		if (exists("slimgui")) {cat("Winter\n");}
	}
	
	if (modValuerGen >=0 & modValuerGen <=((3*(g_s + g_w))-1)) {
		if (exists("slimgui")) {catn("Gen:" + gen + " sampling");}
		for (i in 1:size(sim.mutations)-1){
			tab_line = paste(c(gen,sim.mutations[i].id,sim.mutationFrequencies(p0)[i]), sep = ",");
			writeFile(paste(asString(tmpdir)+"/al_freq_group_"+ asString(group) + "_"+ asString(sim_run)+".txt"), tab_line, append = T);
		
		
		}
		rInd= sample(p0.individuals, 100);
		sim.treeSeqRememberIndividuals(rInd);
	}
	if (modValuerGen >= rGen-2 | modValuerGen >= 0 & modValuerGen <=(g_s + g_w)) {
		pedID=p0.individuals.pedigreeID;
		
		for (ind in 1:p0.individualCount-1){
			indv = p0.individuals[ind].pedigreeID;
			parents = p0.individuals[ind].pedigreeParentIDs;
			grandparents = p0.individuals[ind].pedigreeGrandparentIDs;
			writeFile(paste(asString(tmpdir)+"/pedigree_group_"+ asString(group) + "_"+ asString(sim_run)+".txt"), paste(gen, indv, parents, grandparents, sep=","), append = T);
		}
	}

}


2:12000 early() { if (exists("slimgui")) {cat(mean(p0.cachedFitness(NULL)) + "\n");
		if (length(sim.mutations)>=1){catn(sim.mutationFrequencies(NULL));
			catn(sum(sim.mutationFrequencies(NULL)));}}
	
	if (gen==(log_samp+30)){
		defineGlobal("log_samp", log_samp*2);
		catn(paste("log samp: " + log_samp+ " gen: " +gen));}
}


100000 late() {
	gen = sim.cycle;
	for (i in 1:size(sim.mutations)-1){
		tab_line = paste(c(gen,sim.mutations[i].id,sim.mutationFrequencies(p0)[i]), sep = ",");
		writeFile(paste(asString(tmpdir)+"/al_freq_group_"+ asString(group) + "_"+ asString(sim_run)+".txt"), tab_line, append = T);
	}
	
	
	mem = usage(peak=T);
	line4 = paste("Memory usage: "+ mem+"\n No. restarts: "+restarts);
	catn(line4);
	writeFile(paste(asString(tmpdir)+"/slimlog_group_"+ asString(group) + "_"+ asString(sim_run)+".txt"), line4, append = T);
	
	
	sim.treeSeqOutput(paste(asString(tmpdir)+ "/treeseq_group_"+ asString(group) + "_" + asString(sim_run) + ".trees"));
}

